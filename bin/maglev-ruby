#!/bin/bash
#
# Runs a ruby file using the MagLev VM
#
# Copyright 2009-2015 GemTalk Systems, Inc. All rights reserved.

export LANG=C  # see https://github.com/MagLev/maglev/issues/93

COMMAND="`basename $0`"

usage()
{
    if [[ -n $1 ]]
    then
        echo
        echo "ERROR:  $1"
        echo
    fi
    cat << EOF
Usage: $COMMAND [switches] [--] [programfile] [arguments]

Execute a Ruby file with MagLev

Ruby Options:
   -C <dir>       Changes directory to <dir> before executing.
   -d, --debug    Set debug flag. Allows topaz debugging.
   -e 'command'   Execute command. Several -e's allowed. Omit [programfile]
   -h, --help     Show this message and exit
   -I <path>      Add <path> to \$LOAD_PATH
   -r library     Require library before running
   -S             MagLev will search for the ruby script on the PATH environment
                  variable, unless the script name begins with '/'.
   -w             Turn on warnings.  Sets $VERBOSE true.
   -W<d>          Set the warning level to <d>.  <d> is a single digit 0..9.
                  If set to 0, then no warnings are printed.  Default is 1.
   -X<dir>        Changes directory to <dir> before executing (same as -C)
   --             End of MagLev parameters.  The next parameter is the
                  programfile, then any programfile arguments follow.
   -v, --verbose  Print version number, then turn on verbose mode
   --version      Print version number and exit

MagLev Options:
   --copyright    Print copyright and exit
   -q             Run MagLev VM in quiet mode.  -q is default, unless -d is
                  turned on.  use -d -q for a quiet debug session.
   +d             Set debug flag off.
   -G             Use /opt/gemstone instead of MAGLEV_HOME for locks and logs
   -M<opt>        MagLev specific options.  This flag may be passed multiple
                  times.  The currently recognized options are:
                    commit        wrap script in Maglev.persistent block and
                                  commit; implies -Mpersistent.  E.g.,:
                                     maglev-ruby -Mcommit -e 'require "foo"'
                                  Will read the foo library in persistent
                                  mode, and then commit the code, and any
                                  persistent data it created, to the
                                  repository
                    logSexp       Print sexpressions as they are parsed
                    noCaptureStack  Stack not captured at each Exception raise,
				  slight performance increase .
                    persistent    Start the VM in persistent mode (default is
                                  transient mode)
                    rlwrap        invoke topaz with rlwrap, if available
                    traceGlobals  Trace setting/defining global variables
                    traceLoad     Trace loading of ruby files
                    maglevVersion Print the simple MagLev version
   --tocsz <size> Set the GEM_TEMPOBJ_CACHE_SIZE that will be used (in KB)
   --stone <name> Run programfile connecting to the named stone
   --stonehost <hostname> Connect to repository on hostname
   --netldiname <name> The name of the netldi registered in /etc/services
                       The default is gs64ldi.  Used only if --remotehost is also specified.
Any/all options can be set in the MAGLEV_OPTS environment variable as well
as on the command line.  Command line options override \$MAGLEV_OPTS

EOF
exit 1
}

add_ruby_arg()
{
    if [ ! -z "$ruby_args" ]; then ruby_args="${ruby_args} . " ;fi
    ruby_args="${ruby_args}${1}"
}

# The environment variable STONENAME is for use by internal GemStone
# developers and QA who start the stone manually instead of using
# "maglev start" or "rake maglev:start" If STONENAME is set,
# GEMSTONE_GLOBAL_DIR and GEMSTONE_SYS_CONF will not be set -- even if
# they are undefined.  This enables the default Smalltalk stone
# discovery.
#
# Existing GEMSTONE_GLOBAL_DIR and GEMSTONE_SYS_CONF env variables will
# never be overridden. If GEMSTONE_GLOBAL_DIR is not defined, it will be
# set to $MAGLEV_HOME.  If the GEMSTONE_SYS_CONF environment variables is
# not defined, it will be set based on the --stone parameter, otherwise
# defaulted to etc/system.conf.

# Set GEMSTONE_GLOBAL_DIR unless it's already set or STONENAME is set
# -G will unset it later if needed
[ -z "$STONENAME" ] && [ -z "$GEMSTONE_GLOBAL_DIR" ] && export GEMSTONE_GLOBAL_DIR=$MAGLEV_HOME
stone=${STONENAME:-maglev}

# All of the command line arguments passed to this shell script will either
# be processed and totally consumed by this shell script (e.g., -Mrlwrap
# affects how we invoke the MagLev VM), or passed into the VM in one of the
# following variables:
RUBYSCRIPT=     # The name of the .rb file (or "-", if reading from stdin)
ruby_args=""    # Standard ruby options passed to VM, e.g., "-Ilib" "-e '...'"
script_args=""  # Arguments that will be passed to the ruby script in ARGV
maglev_args=""  # MagLev specific Arguments that MagLev interprets before
                # invoking the script

# The following flags and parameters are used by this shell script
tocsize=""
libs=""
debugFlag=    # off by default
rlwrapFlag=   # off by default
sawDashE=
searchPathFlag=
quietFlag=
netldiname="gs64ldi"
stoneHost=$MAGLEV_STONEHOST # Use the MAGLEV_STONEHOST env variable if available

# Allow arguments to be parsed w/o $MAGLEV_HOME being set. Use parseArgsMH
# as a substitute for MAGLEV_HOME if necessary during arg parsing
parseArgsMH=$MAGLEV_HOME
[[ -z $parseArgsMH ]] && parseArgsMH=${0%%/bin/$COMMAND}

# This function gets called several times
# 1. Parse $MAGLEV_OPTS
# 2. Parse command line parameters
# 3. Parse $RUBYOPT
#
# RUBYOPT is supposed to be processed after all command line options have
# been processed, so we can't do:
#   set -- $MAGLEV_OPTS $RUBYOPT "$@"
# because RUBYOPT will be processed before command line options, likewise
#   set -- $MAGLEV_OPTS "$@" $RUBYOPT
# won't work since RUBYOPT will essentially be passed to the ruby script as
# $script_args.  So, we call this function three times
#
function parseArgs {
    while [ $# -gt 0 ]
    do
        case "$1" in
            -C|-X)
                cd $2 || usage "$2: bad directory for $1"
                shift
                ;;
            -C*|-X*)
                cd ${1:2} || usage "${1:2}: bad directory"
                ;;
            --copyright)
                echo "maglev - Copyright 2008-2015 GemTalk Systems, Inc."
                exit
                ;;
            -d|--debug)
                debugFlag=1
                ;;
            -q)
                quietFlag="-q"
                ;;
            +d)
                debugFlag=
                ;;
            -e)
                add_ruby_arg "'-e' . '${2//\'/''}'"  # smalltalk escape: ' => ''
                sawDashE=1
                shift
                ;;
            -e*)
                add_ruby_arg "'${1//\'/''}'"  # smalltalk escape: ' => ''
                sawDashE=1
                ;;
            -G)
                unset GEMSTONE_GLOBAL_DIR
                ;;
            -h|--help)
                usage  # usage exits
                ;;
            -I|-r)
                add_ruby_arg "'$1' . '$2'"
                shift
                ;;
            -I*|-r*)
                add_ruby_arg "'$1'"
                ;;
            -M*)
                sub_opt=${1:2}
                case $sub_opt in
                    noRlwrap)
                        echo "WARNING: -MnoRlwrap is deprecated"
                        rlwrapFlag=
                        ;;
                    maglevVersion)
                    # Print out just the maglev version, e.g., "0.8"
                        echo "`grep ^maglev ${parseArgsMH}/version.txt | cut -f2 -d ' '`"
                        exit
                        ;;
                    rlwrap)
                        rlwrapFlag=1
                        ;;
                    traceGlobals|logSexp|traceLoad|commit|persistent|noCaptureStack)
                        maglev_args="${maglev_args} ${sub_opt}"
                        ;;
                    *)
                        usage "Unknown option: $1"  # usage exits
                        ;;
                esac
                ;;
            -S) searchPathFlag=1 ;;
            --tocsz)
                tocsize="-T $2"
                shift
                ;;
            --stonehost)
                stoneHost=$2
                shift
                ;;
            --netldiname)
                netldiname=$2
                shift
                ;;
            --stone)
                stone=$2
                # Don't override any existing magic ENV variables
                [ -z "$GEMSTONE_SYS_CONF" ] && export GEMSTONE_SYS_CONF=$MAGLEV_HOME/etc/conf.d/${stone}.conf
                if [ ! -f $GEMSTONE_SYS_CONF ]; then
                    echo "Can't find configuration file $GEMSTONE_SYS_CONF"
                    exit 2
                fi
                shift
                ;;
            -v|--verbose)
                add_ruby_arg "'-v'"
                echo "`grep ^maglev ${parseArgsMH}/version.txt | cut -f1 -d[`[`uname -sm`]"
                if [ $# -eq 1 ]; then exit; fi
                ;;
            --version)
                echo "`grep ^maglev ${parseArgsMH}/version.txt | cut -f1 -d[`[`uname -sm`]"
                exit
                ;;
            -w) # Sets $VERBOSE true; read from stdin if no script
                add_ruby_arg "'-w'"
                ;;
            -W*)
                if [[ ${1:2} =~ ^[0-9]$ ]]; then
                    add_ruby_arg "'$1'"
                else
                    echo "Bad parameter for -W: should be single digit"
                    exit 1
                fi
                ;;
            --)
                break
                ;;
            -*)
                usage "Unrecognized option: $1"  # usage exits
                ;;
            *)
                break
                ;;
        esac
        shift
    done
    unprocessedArgs="$@"  # Pass unparsed parameters back to caller
}

parseArgs $MAGLEV_OPTS

parseArgs "$@"
set -- $unprocessedArgs  # Must be before next parseArgs call

# TODO: RUBYOPT should be limited to the following options: TIdvwWrK,
# plus whatever maglev specific options we want to allow.
parseArgs $RUBYOPT

# Set MAGLEV_HOME and GEMSTONE env variables AFTER parsing parameters.
# This allows "maglev-ruby --version" to run w/o a stone or $MAGLEV_HOME
# set.  Useful for finding installed version w/o a stone running.

# Make sure MAGLEV_HOME is set
if [ -z "${MAGLEV_HOME}" ]; then
  tree=$(cd `dirname "$0"/` ; cd .. ; pwd)

  if [ -d "${tree}/gemstone" ]; then
    export MAGLEV_HOME="${tree}"
    [ -z "$STONENAME" ] && [ -z "$GEMSTONE_GLOBAL_DIR" ] && export GEMSTONE_GLOBAL_DIR=$MAGLEV_HOME
    if [ -n "$debugFlag" ]; then
      echo "$COMMAND: [Warning] \$MAGLEV_HOME is not set."
      echo "Assuming ${MAGLEV_HOME}"
    fi
  else
      echo "$COMMAND: [Error] \$MAGLEV_HOME is not set."
      echo "To fix this, set a valid MAGLEV_HOME, e.g. in your .bashrc"
      exit 1
  fi
fi

# Make sure GEMSTONE is set
if [ -z "${GEMSTONE}" ]; then
    export GEMSTONE=$MAGLEV_HOME/gemstone
    # echo "Setting \$GEMSTONE to \$MAGLEV_HOME/gemstone"
fi

# Check for topaz command to validate the $GEMSTONE directory
if [ ! -x $GEMSTONE/bin/topaz ]; then
    echo "$COMMAND: [Error] $GEMSTONE does not appear to be a valid GemStone product directory."
    echo "To fix this, set a valid GEMSTONE in your .bashrc"
    exit 1
fi

# To login to an already running stone not started by maglev commands
# use the STONENAME env variable , not the --stone option, because.
#  --stone requires existence of a conf file in $MAGLEV_HOME/etc/conf.d
# Don't override any existing magic ENV variables
[ -z "$STONENAME" ] && [ -z "$GEMSTONE_SYS_CONF" ] && export GEMSTONE_SYS_CONF=$MAGLEV_HOME/etc/system.conf

# Make sure the stone is ready
if [[ ! $stoneHost ]]; then
    $GEMSTONE/bin/waitstone "$stone" -1 >/dev/null
    if [[ $? -ne 0 ]] ; then
        echo "$COMMAND: [Error] The MagLev server \"$stone\" is not running."
        echo "To fix this run \"rake $stone:start\" before running $COMMAND."
        exit 1
    fi
fi

# If no -e params and no script, then read commands from STDIN
if [[ ! $sawDashE ]]; then
  if [[ $# -lt 1 ]]; then
        stdinscript=`mktemp /tmp/${COMMAND}.XXXX` || exit 1
        cat /dev/stdin > $stdinscript
        RUBYSCRIPT=$stdinscript
  else
    RUBYSCRIPT=$1
    shift
  fi
else
  if [[ $# -lt 1 ]]; then
    if [ ! -z "$script_args" ]; then script_args="${script_args} . " ;fi
    script_args="'-'"
  fi
fi


# Process the -S parameter, which searches for RUBYSCRIPT on $PATH,
# unless $RUBYSCRIPT begins with /
if [[ $searchPathFlag && $RUBYSCRIPT != /* ]]; then
    OLD_IFS=$IFS
    IFS=:
    for p in $PATH
    do
        if [[ -e "$p/$RUBYSCRIPT" ]]; then
            RUBYSCRIPT="$p/$RUBYSCRIPT"
            break
        fi
    done
    IFS=$OLD_IFS
fi

# Make sure the argument is a valid file, or there was a -e "command" parameter
if [[ ! -z $RUBYSCRIPT && ! -e $RUBYSCRIPT && ! $sawDashE ]]; then
    echo "$COMMAND: [Error] The file \"$RUBYSCRIPT\" does not exist"
    exit 1
fi

# The rest of the command line gets passed to $RUBYSCRIPT via ARGV.
# wrap each of the remaining command line params in single quotes so that
# we can pass them as a literal array to Smalltalk.
while [[ $# > 0 ]]
do
  if [ ! -z "$script_args" ]; then script_args="${script_args} . " ;fi
  script_args="${script_args}'$1'" # Do we need to smalltalk escape ' ?
  shift
done

# need to keep topaz's stdin connected to the tty always
#  so stdin is usable from Ruby , so do not redirect topaz stdin
dbscript=`mktemp /tmp/${COMMAND}.XXXX` || exit 1
trap "rm -f $dbscript $stdinscript" EXIT

# Make sure $dbscript is empty
rm -f $dbscript

### Start building a Topaz script to execute later
cat $MAGLEV_HOME/etc/.topazini > $dbscript
#
if [[ $debugFlag ]]; then
    cat - >> $dbscript <<-EOFB
display oops
omit classoops
EOFB
fi
#  turn off the built-in line editor if rlwrap requested
if [[ $rlwrapFlag ]]; then
  # note that /usr/bin/which on Solaris always produces $?==0, so be careful
  #  about how you test result of which.
  rlwrapExe=$(which rlwrap 2> /dev/null )
  if [[ -f "$rlwrapExe" ]]; then
    cat - >> $dbscript <<-EOFRL
omit lineedit
EOFRL
  else
    echo "WARNING: no executable found for rlwrap, using built-in line editor"
    $rlwrapFlag=
  fi
fi

# Check for remote repository
if [[ $stoneHost ]]; then
    export gs64ldi=${netldiname}
    stone="!@${stoneHost}!${stone}"
fi

cat - >> $dbscript <<-EOF
set gemstone $stone
login
run
|ctx|
EOF
if [[ $debugFlag ]]; then
    cat - >> $dbscript <<-EOFC
  SessionTemps current at:#Maglev_ruby_debugFlag put: true .
EOFC
fi
#
# Use MagRpDEBUG_level environment variable to set MagRpDEBUG_level
# MagRpDEBUG_level can range from 0 (minimal) to 2 (extensive)
#
if [ ! -z "${MagRpDEBUG_level}" ]; then
    # echo "Using MagRpDEBUG_level $MagRpDEBUG_level"
        cat - >> $dbscript <<-EOF
    SessionTemps current at: #MagRpDEBUG put: ${MagRpDEBUG_level} .
EOF
fi

cat - >> $dbscript <<-EOF
System currentSegment: nil .
ctx := RubyContext load: #( ${maglev_args} ) .
 "note you cannot debug Ruby MNU here"
" Exception installDebugBlock: [:ex|
   (ex isKindOf:NameError) ifTrue:[ nil pause ].
 ]. "
ctx runFileNamed: '$RUBYSCRIPT' withRubyArgs: { ${ruby_args} }
        withScriptArgs: {  ${script_args} } .
GsFile stdout close . "ensure final LF on stdout"
^ nil
%
EOF
#
# generate a topaz exit command as last line of init file
if [[ ! $debugFlag  ]]; then
    cat - >> $dbscript <<-EOFB
exit
EOFB
else
    cat - >> $dbscript <<-EOFC
exitifnoerror
EOFC
fi


# The only time we turn off the quiet flag is if -d and no -q
if [[ $debugFlag && ! $quietFlag ]]; then
    quietFlag=
else
    quietFlag="-q"
fi
TOPAZ_CMD="$GEMSTONE/bin/topaz -l $tocsize $quietFlag -I $dbscript "


# echo "GEMSTONE_GLOBAL_DIR = $GEMSTONE_GLOBAL_DIR"
# echo "GEMSTONE_SYS_CONF = $GEMSTONE_SYS_CONF"
# echo "GEMSTONE_EXE_CONF = $GEMSTONE_EXE_CONF"
# echo "TOPAZ_CMD = $TOPAZ_CMD"
# echo "rlwrapFlag: $rlwrapFlag"
# echo "rlwrapExe: $rlwrapExe"


if [[ $rlwrapFlag ]]; then
    $rlwrapExe $TOPAZ_CMD
    exitStatus=$?
else
    # It would be nice to do: exec $TOPAZ_CMD
    # but then we can't delete $dbscript.  topaz needs to be modified...
    $TOPAZ_CMD
    exitStatus=$?
fi

exit $exitStatus
